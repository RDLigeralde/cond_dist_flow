# -*- coding: utf-8 -*-
"""Sample_Points.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Grsoh2PqsthokinK31Umpq7BPFDQ9koU
"""

import jax.numpy as jnp
import numpy as np

"""
Given joint dist. samples, sample product of marginal dists.
"""
def sample_marginals(N, M, data)

  data_product = np.transpose([np.tile(data[:,0], N), np.repeat(data[:,1], N)])

  data_product_get = data_product[np.random.choice(N ** 2, M, replace=False),:]

  dp = jnp.array(sorted(data_product_get, key = lambda x: x[0]))

  return dp

"""
Some synthetic examples for testing
"""
noise = .5

#Moon example from previous paper
def sample_moon(N, M):

  data = np.zeros([N,2])
  for i in range(N):
      data[i,0] = np.random.randn()
      data[i,1]= noise * np.random.randn() + data[i,0] ** 2 - 1

  Zjoint = jnp.array(sorted(data, key = lambda x: x[0]))

  Zinitial = sample_marginals(N, M, data)
  Zcurrent = Zinitial.copy()

  return [Zinitial, Zcurrent, Zjoint]

#Independent case: optimal map is the identity
def sample_indep_gauss(N, M):

  data = np.zeros([N,2])
  for i in range(N):
      data[i,0] = np.random.randn()
      data[i,1]= np.random.randn()

  Zjoint = jnp.array(sorted(data, key = lambda x: x[0]))

  Zinitial = sample_marginals(N, M, data)
  Zcurrent = Zinitial.copy()

  return [Zinitial, Zcurrent, Zjoint]

lam = 1

def sample_expo(N, M):
  data = np.zeros([N, 2])
  for i in range(N):
    data[i,0] = np.random.randn()
    data[i,1] = noise * np.random.randn() + lam * jnp.exp(-lam * data[i,0])

  Zjoint = jnp.array(sorted(data, key = lambda x: x[0]))

  Zinitial = sample_marginals(N, M, data)
  Zcurrent = Zinitial.copy()

  return [Zinitial, Zcurrent, Zjoint]

"""
Source: name of csv with columns "X Samples", "Y Samples"
"""

def read_samples(source):

  data = np.genfromtxt(source, delimiter = ',')

  Zjoint = jnp.array(sorted(data, key = lambda x: x[0]))

  Zinitial = sample_marginals(N, M, data)
  Zcurrent = Zinitial.copy()

  return [Zinitial, Zcurrent, Zjoint]